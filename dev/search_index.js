var documenterSearchIndex = {"docs":
[{"location":"advanced/#Advanced-Usage","page":"Advanced Usage","title":"Advanced Usage","text":"","category":"section"},{"location":"advanced/#Caching-Neural-Net-Parameters","page":"Advanced Usage","title":"Caching Neural Net Parameters","text":"","category":"section"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"Caching the neural net parameters beforehand skips the process of reading in the parameter files when calling one of the analysis functions. This is particularly helpful in optmization settings where the analysis will be called many times.","category":"page"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"using BenchmarkTools\n\nx, y = NeuralFoil.naca4()\ncoordinates = [x y]\nalpha = range(-5,10,step=1.0)\nRe = 1e6\nmodel_size = \"xlarge\"\n\n# Without Caching\nt = @benchmark get_aero_from_coordinates(coordinates, alpha, Re; model_size=model_size)","category":"page"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"# With Caching\nnet_cache = NetParameters(;model_size=model_size)\n\nt = @benchmark get_aero_from_coordinates(coordinates, alpha, Re; net_cache=net_cache)","category":"page"},{"location":"advanced/","page":"Advanced Usage","title":"Advanced Usage","text":"As we can see, caching the network parameters is helpful if the analysis is to be called many times.","category":"page"},{"location":"reference/#Public","page":"API Reference","title":"Public","text":"","category":"section"},{"location":"reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"reference/#NeuralFoil.NetParameters","page":"API Reference","title":"NeuralFoil.NetParameters","text":"NetParameters(; model_size=\"xlarge\")\n\nConstructor for NetParameters type.\n\nKeyword Arguments\n\nmodel_size::String=\"xlarge\" : NeuralFoil model size, choose from:\n\"xxsmall\"\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"xxlarge\"\n\"xxxlarge\"\n\nReturns\n\nnet_cache::NetParameters : NetParameters method object with fields:\n\nNetParameters Object Fields:\n\nmean_inputs_scaled::Vector{Float} : from saved model values\ncov_inputs_scaled::Matrix{Float}: from saved model values\ninv_cov_inputs_scaled::Matrix{Float}: from saved model values\nweights::Vector{Vector{Float}}}: from saved model values\nbiases::Vector{Vector{Float}}}: from saved model values\n\n\n\n\n\n","category":"type"},{"location":"reference/#NeuralFoil.KulfanParameters","page":"API Reference","title":"NeuralFoil.KulfanParameters","text":"KulfanParameters\n\nFields\n\nupper_weights::Vector{Float} : upper side weights (length 8)\nlower_weights::Vector{Float} : lower side weights (length 8)\nleading_edge_weight::Vector{Float} : weight for leading edge thickness (length 1)\nTE_thickness::Vector{Float} : trailing edge thickness (length 1)\n\nNote: for optimization purposes in Julia, it is convenient to have all fields as arrays.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Methods","page":"API Reference","title":"Methods","text":"","category":"section"},{"location":"reference/#NeuralFoil.get_aero_from_kulfan_parameters","page":"API Reference","title":"NeuralFoil.get_aero_from_kulfan_parameters","text":"get_aero_from_coordinates(\n    kulfan_parameters,\n    alpha,\n    Re;\n    n_crit=9.0,\n    xtr_upper=1.0,\n    xtr_lower=1.0,\n    model_size=\"xlarge\",\n    net_cache=nothing,\n)\n\nDetermine aerodynamic properties of an airfoil given Kulfan parameters.\n\nArguments\n\nkulfan_parameters::KulfanParameters : KulfanParameters object containig upper and lower weights, leading edge weight, and trailing edge thickness inputs to the neural net.\nalpha::Vector : angles of attack in degrees\nRe::Vector : Reynolds numbers\n\nKeyword Arguments\n\nn_crit::Float=9.0 : n for e^n model\nxtr_upper::Float=1.0 : upper side laminar to turbulent forced transition location\nxtr_lower::Float=1.0 : lower side laminar to turbulent forced transition location\nmodel_size::String=\"xlarge\" : NeuralFoil model size. Choose from\n\"xxsmall\"\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"xxlarge\"\n\"xxxlarge\"\nnet_cache::NetParameters=nothing : Neural net parameters, if not provided, is generated based on the model_size.\n\nReturns\n\noutputs::NeuralOutputs : NeuralOutputs object containing the outputs of the neural net.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.get_aero_from_coordinates","page":"API Reference","title":"NeuralFoil.get_aero_from_coordinates","text":"get_aero_from_coordinates(\n    coordinates,\n    alpha,\n    Re;\n    n_crit=9.0,\n    xtr_upper=1.0,\n    xtr_lower=1.0,\n    model_size=\"xlarge\",\n    net_cache=nothing,\n)\n\nDetermine aerodynamic properties of an airfoil given airfoil coordinates.\n\nDetermines Kulfan parameters from coordinates and calls get_aero_from_kulfan_parameters.\n\nArguments\n\ncoordinates::Matrix{Float} : [x y] coordintes (counter-clockwise starting at upper side trailing edge)\nalpha::Vector : angles of attack in degrees\nRe::Vector : Reynolds numbers\n\nKeyword Arguments\n\nn_crit::Float=9.0 : n for e^n model\nxtr_upper::Float=1.0 : upper side laminar to turbulent forced transition location\nxtr_lower::Float=1.0 : lower side laminar to turbulent forced transition location\nmodel_size::String=\"xlarge\" : NeuralFoil model size. Choose from\n\"xxsmall\"\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"xxlarge\"\n\"xxxlarge\"\nnet_cache::NetParameters=nothing : Neural net parameters, if not provided, is generated based on the model_size.\n\nReturns\n\noutputs::NeuralOutputs : NeuralOutputs object containing the outputs of the neural net.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.get_aero_from_dat_file","page":"API Reference","title":"NeuralFoil.get_aero_from_dat_file","text":"get_aero_from_dat_file(\n    filename,\n    alpha,\n    Re;\n    n_crit=9.0,\n    xtr_upper=1.0,\n    xtr_lower=1.0,\n    model_size=\"xlarge\",\n    net_cache=nothing,\n)\n\nDetermine aerodynamic properties of an airfoil given in a .dat file.\n\nReads in coordinates and calls get_aero_from_coordinates.\n\nArguments\n\nfilename::String : name (including path) of Selig style coordinate file\nalpha::Vector : angles of attack in degrees\nRe::Vector : Reynolds numbers\n\nKeyword Arguments\n\nn_crit::Float=9.0 : n for e^n model\nxtr_upper::Float=1.0 : upper side laminar to turbulent forced transition location\nxtr_lower::Float=1.0 : lower side laminar to turbulent forced transition location\nmodel_size::String=\"xlarge\" : NeuralFoil model size. Choose from\n\"xxsmall\"\n\"xsmall\"\n\"small\"\n\"medium\"\n\"large\"\n\"xlarge\"\n\"xxlarge\"\n\"xxxlarge\"\nnet_cache::NetParameters=nothing : Neural net parameters, if not provided, is generated based on the model_size.\n\nReturns\n\noutputs::NeuralOutputs : NeuralOutputs object containing the outputs of the neural net.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Outputs","page":"API Reference","title":"Outputs","text":"","category":"section"},{"location":"reference/#NeuralFoil.NeuralOutputs","page":"API Reference","title":"NeuralFoil.NeuralOutputs","text":"NeuralOutputs\n\nFields\n\nanalysis_confidence::Vector : confidence factor reported by NeuralFoil\ncl::Vector : lift coefficients\ncd::Vector : drag coefficients\ncm::Vector : moment coefficients\ntop_xtr::Vector : laminar to turbulent transition location of top surface\nbot_xtr::Vector : laminar to turbulent transition location of bottom surface\nupper_bl_ue_over_vinf::Matrix : upper boundary layer normalized surface velocity\nupper_theta::Matrix : upper boundary layer momentum thickness\nupper_H::Matrix : upper boundary layer shape factor\nlower_bl_ue_over_vinf::Matrix : lower boundary layer normalized surface velocity\nlower_theta::Matrix : lower boundary layer momentum thickness\nlower_H::Matrix : lower boundary layer shape factor\n\n\n\n\n\n","category":"type"},{"location":"reference/#Private","page":"API Reference","title":"Private","text":"","category":"section"},{"location":"reference/#Neural-Net-Functions","page":"API Reference","title":"Neural Net Functions","text":"","category":"section"},{"location":"reference/#NeuralFoil.net","page":"API Reference","title":"NeuralFoil.net","text":"net(x, net_cache)\n\nNeural net\n\nArguments\n\nx::Matrix{Float} : network inputs\nnet_cache::NetParameters : network parameters\n\nReturns\n\ny::Matrix{Float} : network outputs\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.swish","page":"API Reference","title":"NeuralFoil.swish","text":"swish(x)\n\nSwish activation function: x ./ (1.0 .+ exp.(-x))\n\n\n\n\n\n","category":"function"},{"location":"reference/#CST-Functions","page":"API Reference","title":"CST Functions","text":"","category":"section"},{"location":"reference/#NeuralFoil.get_kulfan_parameters","page":"API Reference","title":"NeuralFoil.get_kulfan_parameters","text":"get_kulfan_parameters(coordinates; n_coefficients=8, N1=0.5, N2=1.0)\n\nUse least squares to approximate kulfan parameters generating the input coordinates.\n\nArguments\n\ncoordinates::Matrix{Float} : [x y] coordinates for which to find the Kulfan paramters\n\nKeyword Arguments\n\nn_coefficients::Int=8 : Number of coefficients to use per side\nN1::Float=0.5 : Class function parameter for leading edge\nN2::Float=1.0 : Class function parameter for trailing edge\n\nReturns\n\nkulfan_parameters::KulfanParameters : a KulfanParameters object containing the Kulfan parameters.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.cst","page":"API Reference","title":"NeuralFoil.cst","text":"cst(x, p; N1=0.5, N2=1.0)\n\nDetermine y-coordinates of one side of an airfoil give coeffiecients and x coordinates.\n\nArguments\n\nx::Vector{Float} : x-coordinates (concatenated top and bottom)\np::Vector{Float} : parameters including Kulfan parameters, leading edge weight, and trailing edge gap.\n\nKeyword Arguments\n\nN1::Float=0.5 : Class function parameter for leading edge\nN2::Float=1.0 : Class function parameter for trailing edge\n\nReturns\n\ny::Vector{Float} : y-coordinates associated with the x-coordinates\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.cst_te0","page":"API Reference","title":"NeuralFoil.cst_te0","text":"cst_te0(x, p; N1=0.5, N2=1.0)\n\nDetermine y-coordinates of one side of an airfoil give coeffiecients and x coordinates. Require a zero gap trailing edge\n\nArguments\n\nx::Vector{Float} : x-coordinates (concatenated top and bottom)\np::Vector{Float} : parameters including Kulfan parameters, leading edge weight, and trailing edge gap.\n\nKeyword Arguments\n\nN1::Float=0.5 : Class function parameter for leading edge\nN2::Float=1.0 : Class function parameter for trailing edge\n\nReturns\n\ny::Vector{Float} : y-coordinates associated with the x-coordinates\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.half_cst","page":"API Reference","title":"NeuralFoil.half_cst","text":"half_cst(coefficients, x, dz, leading_edge_weight; N1=0.5, N2=1.0)\n\nDetermine y-coordinates of one side of an airfoil give coeffiecients and x coordinates.\n\nArguments\n\ncoefficients::Vector{Float} : Kulfan parameters\nx::Vector{Float} : x-coordinates (front to back)\ndz::Float : Trailing edge gap\nleading_edge_weight::Float : Kulfan leading edge modification weight\n\nKeyword Arguments\n\nN1::Float=0.5 : Class function parameter for leading edge\nN2::Float=1.0 : Class function parameter for trailing edge\n\nReturns\n\ny::Vector{Float} : y-coordinates\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.bernstein","page":"API Reference","title":"NeuralFoil.bernstein","text":"bernstein(r, n, x)\n\nBernstein Basis Function: binomial(n, r) .* x .^ r .* (1 .- x) .^ (n .- r)\n\n\n\n\n\n","category":"function"},{"location":"reference/#NACA-4-Series-Functions","page":"API Reference","title":"NACA 4-Series Functions","text":"","category":"section"},{"location":"reference/#NeuralFoil.naca4","page":"API Reference","title":"NeuralFoil.naca4","text":"naca4(c=2.0, p=4.0, t=12.0; N=161, x=nothing, blunt_te=false, split=false)\n\nCompute x, z airfoil coordinates for N nodes, based on NACA 4-Series Parameterization.\n\nArguments\n\nc::Float : Maximum camber value (percent of chord)\np::Float : Position along chord (in 10ths of chord) where maximum naca4_camber lies\nt::Float : Maximum thickness of airfoil in percent chord\n\nKeyword Arguments\n\nN::Int : Total number of coordinates to use.  This values should be odd, but if not, the number of points returned will be N-1.\nx::AbstractArray{Float} : x-coordinates (cosine spaced coordinates used by default)\nblunt_te::Bool : Flag whether trailing edge is blunt or not\nsplit::Bool : Flag wheter to split into upper and lower halves.\n\nReturns\n\nIf split == false:\n\nx::AbstractArray{Float} : Vector of x coordinates, clockwise from trailing edge.\nz::AbstractArray{Float} : Vector of z coordinates, clockwise from trailing edge.\n\nIf split == true:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates from trailing edge to leading edge.\nxu::AbstractArray{Float} : Vector of upper half of x coordinates from leading edge to trailing edge.\nzl::AbstractArray{Float} : Vector of lower half of z coordinates from trailing edge to leading edge.\nzu::AbstractArray{Float} : Vector of upper half of z coordinates from leading edge to trailing edge.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.naca4_camber","page":"API Reference","title":"NeuralFoil.naca4_camber","text":"naca4_camber(x, max_camber, max_camber_pos)\n\nCompute camber at a given chord-normalized x-position by NACA 4-series camber equations.\n\nArguments\n\nx::Float : x position along chordline\nmax_camber::Float64 : Maximum camber value\nmax_camber_pos::Float64 : Position of maximum camber\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.naca4_thickness","page":"API Reference","title":"NeuralFoil.naca4_thickness","text":"naca4_thickness(x, maxthick; blunt_te=false)\n\nCompute thickness at a given chord-normalized x-position by NACA 4-series thickness equations.\n\nArguments\n\nx::Float : x position along chordlin, markersize=3, markershape=:squaree\nmaxthick::Float : Maximum thickness value\n\nKeyword Arguments\n\nblunt_te::Bool : Flag whether trailing edge is blunt or not\n\n\n\n\n\n","category":"function"},{"location":"reference/#Utility-Functions","page":"API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"reference/#Neural-Net-Post-process-Utilities","page":"API Reference","title":"Neural Net Post-process Utilities","text":"","category":"section"},{"location":"reference/#NeuralFoil.sigmoid","page":"API Reference","title":"NeuralFoil.sigmoid","text":"sigmoid(x; ln_eps=log(10.0 / floatmax(Float64)))\n\nSigmoid function: 1.0 / (1.0 + exp(-x))\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.squared_mahalanobis_distance","page":"API Reference","title":"NeuralFoil.squared_mahalanobis_distance","text":"squared_mahalanobis_distance(x::AbstractMatrix)\n\nComputes the squared Mahalanobis distance of a set of points from the training data.\n\nArguments:\n\nx::Matrix: Query point in the input latent space. Shape: (Ncases, Ninputs) For non-vectorized queries, N_cases=1.\nmean_inputs_scaled::Vector : from scaledinputdistribution\ninv_cov_inputs_scaled::Matrix : from scaledinputdistribution\n\nReturns:\n\nsqmd::Vector : The squared Mahalanobis distance. Shape: (N_cases,)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Airfoil-Utilities","page":"API Reference","title":"Airfoil Utilities","text":"","category":"section"},{"location":"reference/#NeuralFoil.get_coordinates_from_file","page":"API Reference","title":"NeuralFoil.get_coordinates_from_file","text":"get_coordinates_from_file(filename)\n\nParse Selig style dat file into [x y] matrix of coordinates.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.split_cosine_spacing","page":"API Reference","title":"NeuralFoil.split_cosine_spacing","text":"split_cosine_spacing(N::Integer=160)\n\nReturns cosine spaced x coordinates from 0 to 1.\n\nArguments\n\nN::Integer : Number of points.\n\nReturns\n\nx::AbstractArray{Float} : cosine spaced x-coordinates, starting at 0.0 ending at 1.0.\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.normalize_coordinates!","page":"API Reference","title":"NeuralFoil.normalize_coordinates!","text":"normalize_coordinates!(coordinates)\n\nNormalize airfoil to unit chord and shift leading edge to zero. Adjusts coordinates in place.\n\nArguments:\n\ncoordinates::Array{Float} : Array of [x y] coordinates\n\n\n\n\n\n","category":"function"},{"location":"reference/#NeuralFoil.split_upper_lower","page":"API Reference","title":"NeuralFoil.split_upper_lower","text":"split_upper_lower(x, y; idx::Integer=nothing)\n\nSplit the upper and lower halves of the airfoil coordinates.\n\nAssumes leading edge point is at first minimum x value if idx is not provided. Returns the upper and lower coordinates each with the leading edge point. Assumes airfoil is defined clockwise starting at the trailing edge.\n\nArguments:\n\nx::AbstractArray{Float} : Vector of x coordinates\ny::AbstractArray{Float} : Vector of y coordinates\n\nKeyword Arguments:\n\nidx::Integer : optional index at which to split the coordinates\n\nReturns:\n\nxl::AbstractArray{Float} : Vector of lower half of x coordinates\nxu::AbstractArray{Float} : Vector of upper half of x coordinates\nyl::AbstractArray{Float} : Vector of lower half of y coordinates\nyu::AbstractArray{Float} : Vector of upper half of y coordinates\n\n\n\n\n\n","category":"function"},{"location":"reference/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"Modules = [NeuralFoil]","category":"page"},{"location":"#NeuralFoil.jl","page":"Intro","title":"NeuralFoil.jl","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"(Image: Stable) (Image: Build Status) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"This is a partial Julia translation of version 0.3.2 of NeuralFoil","category":"page"},{"location":"#Citing-NeuralFoil","page":"Intro","title":"Citing NeuralFoil","text":"","category":"section"},{"location":"","page":"Intro","title":"Intro","text":"If you use NeuralFoil in your research, please cite both the original code","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"@misc{neuralfoil,\n  author = {Peter Sharpe},\n  title = {{NeuralFoil}: An airfoil aerodynamics analysis tool using physics-informed machine learning},\n  year = {2023},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/peterdsharpe/NeuralFoil}},\n}","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"And the original author's PhD thesis, which has an extended chapter that serves as the primary long-form documentation for the tool:","category":"page"},{"location":"","page":"Intro","title":"Intro","text":"@phdthesis{aerosandbox_phd_thesis,\n   title = {Accelerating Practical Engineering Design Optimization with Computational Graph Transformations},\n   author = {Sharpe, Peter D.},\n   school = {Massachusetts Institute of Technology},\n   year = {2024},\n}","category":"page"},{"location":"tutorial/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"tutorial/#Analyze-From-Coordinates","page":"Quick Start","title":"Analyze From Coordinates","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"x, y = NeuralFoil.naca4()\nalpha = 5.0\nRe = 1e6\n\nouputs = get_aero_from_coordinates([x y], alpha, Re; model_size=\"xlarge\")","category":"page"},{"location":"tutorial/#Analyze-From-.dat-File","page":"Quick Start","title":"Analyze From .dat File","text":"","category":"section"},{"location":"tutorial/","page":"Quick Start","title":"Quick Start","text":"filename = \"naca_2412.dat\"\nalpha = 5.0\nRe = 1e6\n\nouputs = get_aero_from_file(filename, alpha, Re; model_size=\"xlarge\")","category":"page"}]
}
